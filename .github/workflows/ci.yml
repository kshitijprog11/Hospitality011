name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
  SECRET_KEY: test-secret-key-for-ci
  JWT_SECRET_KEY: test-jwt-secret-key
  REDIS_URL: redis://localhost:6379/0

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Download spaCy model
      run: python -m spacy download en_core_web_sm

    - name: Run backend tests
      run: |
        cd backend
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  test-frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run ESLint
      run: |
        cd frontend
        npm run lint

    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/

  integration-tests:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create test environment file
      run: |
        cat > .env << EOF
        DATABASE_PASSWORD=test_password
        REDIS_PASSWORD=test_redis_password
        SECRET_KEY=test-secret-key
        JWT_SECRET_KEY=test-jwt-secret
        DEBUG=True
        EOF

    - name: Build and test with Docker Compose
      run: |
        docker-compose -f docker-compose.yml build
        docker-compose -f docker-compose.yml up -d database redis
        sleep 10
        docker-compose -f docker-compose.yml up -d backend
        sleep 15
        
        # Run integration tests
        docker-compose -f docker-compose.yml exec -T backend pytest tests/ -v
        
        # Test API endpoints
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/api/feedback/health || exit 1

    - name: Cleanup
      if: always()
      run: docker-compose down -v

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r backend/app/ -f json -o bandit-report.json || true

    - name: Run npm audit
      run: |
        cd frontend
        npm audit --audit-level moderate || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          frontend/npm-audit.json

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, integration-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/feedback-backend:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/feedback-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/feedback-frontend:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/feedback-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment script here
        # This could be:
        # - SSH to staging server and pull latest images
        # - Update Kubernetes manifests
        # - Trigger deployment via API
        # - Update cloud service configurations

  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment script here
        # This should include:
        # - Blue-green deployment strategy
        # - Health checks before switching traffic
        # - Rollback capability
        # - Monitoring and alerting setup